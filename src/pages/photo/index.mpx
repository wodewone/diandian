<template>
    <view class="page">
        <include src="../../components/template/header.wxml"></include>
        <view class="container">
            <petal class="petal-bg"></petal>
            <waterfall imgList="{{imgList}}" localList="{{localList}}" loading="{{loading}}" latest="{{latest}}" class="wrap" bind:refresh="refreshList"></waterfall>
            <view wx:if="{{imgList.length && !latest}}" class="spin-loading"></view>
        </view>
        <uploadImg imgList="{{imgList}}" bind:update="updateList"></uploadImg>
    </view>
</template>

<script>
import { createPage } from '@mpxjs/core'
import store from '@/store'
import fetch from '@/plugins/fetch'

createPage({
    data: {
        limit: 21,
        loading: true,
        imgList: [],
        localList: [],
        latest: false,
        offset: 0
    },
    computed: {
        ...store.mapState([
            'loginState'
        ])
    },
    methods: {
        updateList () {
            this.fetchImgList()
        },
        refreshList () {
            this.imgList = []
            this.fetchImgList()
        },
        eventUpload ({ detail }) {
            const { disabled = false } = detail
            console.info('eventUpload: ', detail)
            this.btnDisabled = disabled
        },
        async fetchImgList () {
            if (this.loading) {
                return false
            }
            this.loading = true
            const { imgList, limit } = this
            const len = imgList.length
            const offset = len >= limit - 1 ? len : null
            const { success, data } = await fetch.get('/get/photo/list', { limit, offset })
            if (success) {
                this.latest = data.length < limit
                const list = this.latest ? data : data.slice(0, limit - 1)
                const newData = list.map((o) => {
                    return {
                        ...o,
                        src: o.url + '?imageView2/2/w/200/q/50'
                    }
                })
                this.imgList = this.imgList.concat(newData)
            }
            this.loading = false
        }
    },
    // onReady () {
    onShow () {
        // if (!this.imgList.length) {
        // }
    },
    onPullDownRefresh () {
        this.fetchImgList()
        wx.stopPullDownRefresh()
    },
    onReachBottom (...arg) {
        console.info('onReachBottom: ', ...arg)
        if (!this.latest) {
            this.fetchImgList()
        }
    },
    watch: {
        loginState: {
            handler (state) {
                if (state) {
                    this.fetchImgList()
                    store.dispatch('getPhotoToken')
                }
            },
            immediate: true
        }
    }
})
</script>

<style lang="scss">
    .page{
        padding-bottom: 50px;
    }

    .petal-bg{
        z-index: 999;
    }

    .container{
        min-height: 100%;

        .spin-loading{
            height: 50px;
        }
    }
</style>

<script type="application/json">
    {
        "usingComponents": {
            "petal": "../../components/petal",
            "uploadImg": "../../components/uploadImg",
            "waterfall": "../../components/waterfall"
        },
        "enablePullDownRefresh": true,
        "navigationBarTitleText": "Welcome!"
    }
</script>
