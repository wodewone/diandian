<template>
    <view wx:if="{{upToken}}" class="fix-box">
        <view
            wx:if="{{localList.length}}"
            class="pic-load">
            <view
                wx:key="index"
                wx:for="{{localList}}"
                class="pic-box {{item.success ? 'success' : ''}}"
                wx:style="background-image: url({{item.src}})"
                bindtap="loadEvent(index)"
            >
                <view hidden="{{item.exists}}" class="shadow" wx:style="height: {{item.progress}}%"></view>
                <view hidden="{{!item.exists}}" class="exists">已存在</view>
            </view>
        </view>
        <view class="btn-groups">
            <button class="btn add" type="primary" bindtap="chooseImages" disabled="{{btnDisabled}}">上传新照片</button>
            <button class="btn edit" disabled="{{!imgList.length || btnDisabled}}">编辑({{ imgList.length }}/{{ maxNum }})</button>
        </view>
    </view>
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core'
import fetch from '../../plugins/fetch'
import md5 from 'md5'
// import * as qiniu from 'qiniu-js'

createComponent({
    properties: {
        imgList: {
            type: Array,
            default: null
        }
    },
    data: {
        maxNum: 200,
        btnDisabled: false,
        imgUrlBase: 'http://cdm.wodewone.com',
        imgScope: null,
        upToken: null,

        imgProgress: {},
        localList: []
    },
    methods: {
        loadEvent (index) {
            const item = this.localList[index]
            try {
                item.cancel()
                mpx.delete(this.localList, index)
            } catch (e) {
                console.warn(e)
            }
        },
        getImagePaths (count = 5, sizeType = ['original']) {
            return fetch.wx('chooseImage', { count, sizeType })
        },
        getFileStream (filePath, encoding = 'binary') {
            return new Promise((resolve, reject) => {
                wx.getFileSystemManager().readFile({
                    filePath,
                    encoding,
                    success (res) {
                        resolve(res.data)
                    },
                    fail (res) {
                        reject(res)
                    }
                })
            })
        },
        fileMd5 (filePath) {
            const { getFileStream } = this
            return new Promise(async (resolve, reject) => {
                try {
                    const fileStream = await getFileStream(filePath)
                    const md5Key = md5(fileStream)
                    resolve(md5Key)
                } catch (error) {
                    reject(error)
                }
            })
        },
        // uploadFile (file, key) {
        //     const { upToken: token } = this
        //     if (!token) {
        //         return false
        //     }
        //     const putExtra = {}
        //     const config = {
        //         useCdnDomain: true,
        //         region: qiniu.region.z1
        //     }
        //     return qiniu.upload(file, key, token, putExtra, config)
        // },
        uploadFile (file, index) {
            const { upToken: token, imgScope, imgList } = this
            if (!token) {
                return false
            }
            const formData = {
                token,
                key: `${imgScope}/${imgList.length + index}`
            }
            console.info(99811, file)
            return new Promise((resolve, reject) => {
                const local = this.localList[index]
                const success = ({ data, statusCode }) => {
                    if (statusCode === 614) {
                        mpx.set(local, 'exists', true)
                        return resolve()
                    }
                    const { key, hash } = JSON.parse(data)
                    // const src = `${imgUrlBase}/${key}`
                    mpx.set(local, 'success', true)
                    resolve({ key, hash })
                }
                const uploadTask = wx.uploadFile({
                    url: 'https://up-z1.qiniup.com',
                    filePath: file,
                    name: 'file',
                    formData: formData,
                    success,
                    fail (res) {
                        console.info('999 fail:', res)
                        reject(res)
                    }
                })
                uploadTask.onProgressUpdate(({ progress }) => {
                    mpx.set(local, 'progress', 100 - progress)
                })
                local.cancel = () => uploadTask.abort()
            })
        },
        async chooseImages () {
            const { tempFilePaths = [] } = await this.getImagePaths()
            if (tempFilePaths.length) {
                const list = await Promise.all(tempFilePaths.map(async (src, index) => {
                    // const observable = this.uploadFile(src, this.fileMd5(src))
                    mpx.set(this.localList, index, { src })
                    const item = await this.uploadFile(src, index)
                    // const item = { src, tempId }
                    // item.subscription = observable.subscribe({
                    //     next ({ total: { percent } }) { item.percent = percent },
                    //     error ({ message }) {
                    //         item.fail = true
                    //         message && wx.showToast({ title: message, icon: 'none', duration: 2000 })
                    //     }
                    // })
                    return item
                }))
                const _list = list.filter(i => i)
                console.info(181, list, _list, this.localList)
                if (_list.length) {
                    fetch.post('/set/photo/add', { list: _list })
                    this.triggerEvent('update', { disabled: false })
                }
            }
            // this.localList = tempFilePaths.map(src => {
            //     const item = { src }
            //     item.time = 1
            //     setInterval(() => {
            //         item.time++
            //     }, 2000)
            //     return item
            // })
        },
        async fetchUpToken () {
            const { success, data, msg } = await fetch.get('/get/uptoken')
            if (success) {
                const { token, url, scope } = data
                this.imgUrlBase = url || this.imgUrlBase
                this.upToken = token
                this.imgScope = scope
            } else {
                msg && wx.showToast({ title: msg, icon: 'none', duration: 2000 })
            }
        }
    },
    ready () {
        this.fetchUpToken()
    }
})
</script>

<style lang="scss">
.fix-box {
    left: 5vw;
    width: 90vw;
    bottom: 10px;
    position: fixed;
}

.pic-load{
    left: 0;
    width: 100%;
    bottom: 110%;
    display: flex;
    position: absolute;

    .pic-box{
        width: 10%;
        height: 45px;
        display: flex;
        overflow: hidden;
        text-align: center;
        border-radius: 5px;
        align-items: flex-end;
        box-shadow: 0 0 3px rgba(#000, 0.9);
        background: rgba(#000, .8) no-repeat center/100% auto;

        & + .pic-box{
            margin-left: 1.1%;
        }

        &.success{
            width: 0;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .shadow{
            width: 100%;
            height: 100%;
            background: rgba(#000, 0.6);
            transition: height linear .3s;
        }
        .exists{
            color: #b8b8b8;
            font-size: 10px;
            line-height: 45px;
            background: rgba(#000, 0.6);
        }
    }
    .album{
        width: 100%;
        height: auto;
        min-height: 30px;
        vertical-align: middle;
    }
}

.btn-groups{
    display: flex;

    button {
        padding-left: 0;
        padding-right: 0;
        font-size: 12px;
        box-shadow: 0 0 5px rgba(#000, 0.5);

        &.add {
            flex: 1;
            margin-right: 2.5vw;
        }

        &.edit {
            width: 90px;
            color: #fff;
            background: #327cc3;
        }

        &.btn[disabled] {
            color: #a5a2a2;
            background: #d2d8e2;
            box-shadow: 0 0 3px rgba(#000, 0.3);
        }
    }
}
</style>

<script type="application/json">
{
    "component": true
}
</script>
