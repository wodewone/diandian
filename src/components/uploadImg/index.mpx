<template>
    <view wx:if="{{upToken}}" class="fix-box">
        <button class="btn add" type="primary" bindtap="chooseImages" disabled="{{btnDisabled}}">上传新照片</button>
        <button class="btn edit" disabled="{{btnDisabled}}">编辑</button>
    </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'
import fetch from '../../plugins/fetch'
import md5 from 'md5'
import * as qiniu from 'qiniu-js'

createComponent({
    data: {
        btnDisabled: false,
        upToken: null
    },
    methods: {
        getImagePaths (count = 5, sizeType = ['original']) {
            return fetch.wx('chooseImage', { count, sizeType })
        },
        getFileStream (filePath, encoding = 'binary') {
            return new Promise((resolve, reject) => {
                wx.getFileSystemManager().readFile({
                    filePath,
                    encoding,
                    success (res) {
                        resolve(res.data)
                    },
                    fail (res) {
                        reject(res)
                    }
                })
            })
        },
        fileMd5 (filePath) {
            const { getFileStream } = this
            return new Promise(async (resolve, reject) => {
                try {
                    const fileStream = await getFileStream(filePath)
                    const md5Key = md5(fileStream)
                    resolve(md5Key)
                } catch (error) {
                    reject(error)
                }
            })
        },
        uploadFile (file, key) {
            const { upToken: token } = this
            if (!token) {
                return false
            }
            const putExtra = {}
            const config = {
                useCdnDomain: true,
                region: qiniu.region.z1
            }
            return qiniu.upload(file, key, token, putExtra, config)
        },
        async chooseImages () {
            const { tempFilePaths = [] } = await this.getImagePaths()
            if (tempFilePaths.length) {
                this.localList = await Promise.all(tempFilePaths.map(async (src, tempId) => {
                    const observable = this.uploadFile(src, this.fileMd5(src))
                    const item = { src, tempId }
                    item.subscription = observable.subscribe({
                        next ({ total: { percent } }) { item.percent = percent },
                        error ({ message }) {
                            item.fail = true
                            message && wx.showToast({ title: message, icon: 'none', duration: 2000 })
                        }
                    })
                    return item
                }))
                console.info(181, this.localList)
            }
            // this.localList = tempFilePaths.map(src => {
            //     const item = { src }
            //     item.time = 1
            //     setInterval(() => {
            //         item.time++
            //     }, 2000)
            //     return item
            // })
        },
        async fetchUpToken () {
            const { success, data, msg } = await fetch.get('/get/uptoken')
            if (success) {
                const { token } = data
                this.upToken = token
            } else {
                msg && wx.showToast({ title: msg, icon: 'none', duration: 2000 })
            }
        }
    },
    ready () {
        this.fetchUpToken()
    }
})
</script>

<style lang="scss">
.fix-box {
    left: 5vw;
    width: 90vw;
    bottom: 10px;
    display: flex;
    position: fixed;

    button {
        font-size: 12px;
        box-shadow: 0 0 5px rgba(#000, 0.5);

        &.add {
            width: 70%;
            margin-right: 2.5vw;
        }

        &.edit {
            flex: 1;
            color: #fff;
            background: #327cc3;
        }

        &.btn[disabled] {
            color: #a5a2a2;
            background: #d2d8e2;
            box-shadow: 0 0 3px rgba(#000, 0.3);
        }
    }
}
</style>

<script type="application/json">
{
    "component": true
}
</script>
