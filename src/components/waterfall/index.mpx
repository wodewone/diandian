<template>
    <view class="wrap">
        <view class="img-list">
            <view wx:if="{{!imgList.length && loading}}" class="loading">
                <view class="spin-loading"></view>
            </view>
            <block wx:else>
                <view wx:if="{{!imgList.length}}" class="no-data"></view>
                <view
                    class="column"
                    wx:key="index"
                    wx:for="{{showList}}"
                    wx:style="{{columnWidth}}"
                >
                    <view
                        wx:key="key"
                        wx:for="{{item || []}}"
                        wx:for-index="idx"
                        wx:for-item="img"
                        class="item"
                        bindtap="eventItem(img)"
                    >
                        <label wx:if="{{isEdit}}" class="check-option">
                            <checkbox class="checkbox"/>
                        </label>
                        <image class="album" src="{{img.src}}" mode="widthFix" lazy-load="true"></image>
                    </view>
                    <view wx:if="{{latest && item.length > 3}}" class="item end">
                        <text class="text">{{endSay[index]}}</text>
                    </view>
                </view>
            </block>
        </view>
        <view
            bindtap="closeLayer"
            class="layer"
            hidden="{{!layerShow}}"
            wx:if="layerImg"
        >
            <view class="inner" wx:style="{{layerStyle}}">
                <image class="photograph {{isLoadingImg ? 'load' : ''}}" mode="widthFix" src="{{layerImg}}" bindload="loadImg"></image>
            </view>
        </view>
        <view wx:if="{{!loading}}" class="btn-group">
            <button wx:if="{{isEdit}}" class="btn del" bindtap="eventDel" disabled="{{!editList.length}}">
                删除 ({{editList.length}})
            </button>
            <button class="btn {{isEdit ? 'cancel' : 'edit'}}" disabled="{{!imgList.length}}" bindtap="eventEdit">
                <block wx:if="{{!isEdit}}">编辑({{ imgList.length }}/{{ maxNum }})</block>
                <block wx:else>取消</block>
            </button>
        </view>
    </view>
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core'
import fetch from '@/plugins/fetch'
import store from '@/store'

createComponent({
    properties: {
        imgList: {
            type: Array,
            default: null
        },
        loading: {
            type: Boolean,
            default: true
        },
        latest: {
            type: Boolean,
            default: false
        }
    },
    data: {
        layerShow: false,
        layerImg: null,
        layerBack: null,
        endSay: ['点击可', '编写任', '意内容'],
        isLoadingImg: true,

        showList: [],
        columnNum: 2,
        column: [],

        isEdit: false,
        editList: []
    },
    created () {
        this.showList = []
        this.column = new Array(this.columnNum).fill(0)
    },
    computed: {
        ...store.mapState([
            'photoData'
        ]),
        maxNum () {
            return this.photoData.max
        },
        columnWidth () {
            const width = (100 / this.column.length).toFixed(2) + '%'
            return { width, 'max-width': width }
        },
        layerStyle () {
            return { 'background-image': `url(${this.layerBack})` }
        }
    },
    methods: {
        loadImg () {
            this.isLoadingImg = false
        },
        async eventDel () {
            const { confirm } = await fetch.wx('showModal', {
                title: '提示',
                content: '确认删除[' + this.editList.length + ']张照片？'
            })
            if (confirm) {
                const list = this.editList
                const { success, msg } = await fetch.post('/set/photo/del', { list })
                if (success) {
                    this.editList = []
                    this.isEdit = false
                    this.triggerEvent('refresh')
                } else {
                    msg && wx.showToast({ title: msg, icon: 'none', duration: 2000 })
                }
            }
        },
        async eventEdit () {
            this.editList = []
            this.isEdit = !this.isEdit
        },
        eventItem (item) {
            const { url, src, hash } = item
            if (this.isEdit) {
                const fIndex = this.editList.findIndex((v) => v === hash)
                fIndex > -1 ? this.editList.splice(fIndex, 1) : this.editList.push(hash)
            } else {
                this.isLoadingImg = true
                this.layerShow = !this.layerShow
                this.layerBack = src
                this.layerImg = url + '?imageView2/2/w/750'
            }
        },
        closeLayer () {
            this.layerShow = !this.layerShow
        },
        renderData (list) {
            if (!list || !list.length) {
                return false
            }
            const _list = list.reduce((so, item) => {
                const { height = 0, width = 0 } = item
                const h = Math.ceil(height / width * 100)
                const fIndex = this.column.findIndex(i => i === Math.min(...this.column))
                console.info(h, Math.min(...this.column), fIndex)
                const index = fIndex >= 0 ? fIndex : 1
                this.column[index] += h
                so[index] = so[index] || []
                so[index].push(item)
                return so
            }, [])
            _list.forEach((item, index) => {
                mpx.set(this.showList, index, [])
                this.showList[index].push(...item)
            })
        }
    },
    watch: {
        imgList (v) {
            v && v.length && this.renderData(v)
        }
    }
})
</script>

<style lang="scss">
.wrap{
    width: 100vw;
}
.img-list {
    display: flex;
    padding: 0 1vw;
    overflow: auto;
    min-height: 65vh;

    .loading {
        height: 65vh;
        display: flex;
        align-items: center;
        justify-content: center;

        .spin-loading {
            width: 50px;
            height: 50px;
            border-radius: 5px;
            background-color: rgba(#000, 0.2);
        }
    }

    .no-data {
        background: url("../../images/pic-photo-none.png") no-repeat center/50%;
    }

    .column {
        flex: 1;
        padding: 1vw;
        display: flex;
        flex-direction: column;
    }

    .check-option{
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        position: absolute;
        align-items: center;
        justify-content: center;
        background: rgba(#000, 0.3);

        .checkbox{
            top: 5px;
            right: 15px;
            width: 10px;
            height: 10px;
            position: absolute;
        }
    }

    .item {
        width: 100%;
        overflow: hidden;
        position: relative;
        border-radius: 5px;
        margin-bottom: 10px;

        .album {
            width: 100%;
            /*background: #d4d4d4;*/
            vertical-align: middle;
            /*box-shadow: 0 0 5px rgba(#000, .25);*/
        }

        &.end {
            flex: 1;
            display: flex;
            min-height: 30px;
            padding-bottom: 0;
            border-radius: 5px;
            align-items: center;
            justify-content: center;
            box-shadow: 0 0 5px rgba(#000, .25) inset;

            .text{
                font-size: 10px;
                font-family: "Songti SC", "PingFang SC", serif;
            }
        }
    }
}

.layer {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9;
    position: fixed;
    background-color: #000;

    .inner {
        width: 100%;
        height: 100%;
        display: flex;
        overflow: auto;
        background-size: 0 0;
        align-items: center;
        justify-content: center;
        -webkit-overflow-scrolling: touch;

        &:before {
            content: '';
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            margin: -10px;
            filter: blur(8px);
            position: fixed;
            background-size: cover;
            background-image: inherit;
            background-position: center;
        }

        &:after {
            content: '';
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
            position: fixed;
            background-color: rgba(#fff, 0.1);
        }
    }

    .photograph {
        z-index: 3;
        max-width: 85%;
        border-radius: 5px;
        position: relative;
        box-shadow: 0 0 5px rgba(#000, 0.3);
        background: rgba(#000, 0.6) no-repeat center/20px;

        &.load {
            background-image: url("../../images/loading.svg");
        }
    }
}

.btn-group {
    .btn {
        margin: 0;
        z-index: 2;
        right: 2vw;
        width: 46vw;
        color: #fff;
        bottom: 8px;
        position: fixed;
        font-size: 12px;
        padding-left: 0;
        padding-right: 0;
        background-color: #f2f2f2;
        box-shadow: 0 0 5px rgba(#000, 0.3);

        &.edit {
            background: #327cc3;
        }

        &.del {
            left: 2vw;
            right: auto;
            color: #fa5151;
        }

        &.cancel {
            background: #327cc3;
            /*background: #a9adb5;*/
        }

        &[disabled] {
            color: rgba(0, 0, 0, 0.2);
        }
    }
}
</style>

<script type="application/json">
    {
        "component": true,
        "styleIsolation": "apply-shared"
    }
</script>
