<template>
    <view class="wrap">
        <view class="img-list">
            <block wx:if="{{!loading}}">
                <view hidden="{{imgList.length}}" class="no-data"></view>
                <view
                    class="column"
                    wx:key="index"
                    wx:for="{{imgList}}"
                    wx:style="{{columnWidth}}"
                >
                    <view
                        wx:key="idx"
                        wx:for="{{item || []}}"
                        wx:for-index="idx"
                        wx:for-item="img"
                        class="item"
                        bindtap="openLayer(img)"
                    >
                        <view class="progress-box" wx:if="{{localImgObj[img.tempId]}}"><view class="progress"><view class="content" wx:style="{{localImgObj[img.id]}}"></view></view></view>
                        <image class="album" src="{{img.src}}" mode="widthFix" lazy-load="true"></image>
                    </view>
                    <view class="item">{{endSay[index]}}</view>
                </view>
            </block>
        </view>
        <view
            bindtap="closeLayer"
            class="layer"
            hidden="{{!layerShow}}"
            wx:if="layerImg"
        >
            <view class="inner" wx:style="{{layerStyle}}">
                <image class="photograph" mode="widthFix" src="{{layerImg}}"></image>
            </view>
        </view>
        <view class="temp-load-box">
            <image wx:for="{{tempList}}" wx:key="index" src="{{item.src}}" bindload="loadImg" binderror="loadImg" data-index="{{index}}" />
        </view>
    </view>
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core'
// import fetch from '../../plugins/fetch'

createComponent({
    properties: {
        list: {
            type: Array,
            default: null
        },
        localList: {
            type: Array,
            default: null
        },
        loading: Boolean
    },
    data: {
        layerShow: false,
        layerImg: null,
        endSay: ['开心', '快乐', '高兴'],
        tempList: [],
        imgList: [],
        column: [0, 0, 0],
        imgCount: 0,

        localImgObj: {}
    },
    computed: {
        columnWidth () {
            const width = (100 / this.column.length).toFixed(2) + '%'
            return { width, 'max-width': width }
        },
        layerStyle () {
            return {
                'background-image': `url(${this.layerImg})`
            }
        }
    },
    methods: {
        openLayer ({ src }) {
            if (!src.indexOf('http')) {
                this.layerShow = !this.layerShow
                this.layerImg = src
            }
        },
        closeLayer () {
            this.layerShow = !this.layerShow
        },
        loadImg ({ detail: { width, height }, target }) {
            const { dataset: { index } = {} } = target || {}
            this.imgCount++
            if (height) {
                this.tempList[index].height = Math.ceil(height * 100 / width)
            } else {
                this.tempList[index].height = 100
            }
        },
        renderData (arrList = [], unshift = false) {
            const { column } = this
            const list = arrList.reduce((so, item) => {
                const { height = 0 } = item
                const minColumn = Math.min(...column)
                const fIndex = column.findIndex(i => i === minColumn)
                const index = fIndex >= 0 ? fIndex : 0
                this.column[index] += height
                so[index] = so[index] || []
                so[index].push(item)
                return so
            }, [])
            list.forEach((item, index) => {
                if (!this.imgList[index]) {
                    mpx.set(this.imgList, index, [])
                }
                // this.imgList[index] = this.imgList[index] || []
                if (unshift) {
                    this.imgList[index].unshift(...item)
                } else {
                    this.imgList[index].push(...item)
                }
            })
            console.info(9811, list, this.column, this.imgList)
            // this.triggerEvent('upload', { disabled: false })
        },
        handlerLocalList (list) {
            // const { imgList, tempList } = this
            // const len = imgList.length + tempList.length
            // this.localImgObj = list.reduce((so, item, index) => {
            //     const { src, id } = item
            //     if (!id) {
            //         const tempId = len + index
            //         so[tempId] = { src, tempId }
            //     }
            //     return so
            // }, {})
            // this.triggerEvent('upload', { disabled: true })
            // list.forEach(async ({ src }) => {
            //     const s = await fetch.wx('getImageInfo', { src })
            //     console.info(1122, s)
            // })
            this.renderData(list, true)
        }
    },
    watch: {
        list (v) {
            v && v.length && (this.tempList = v)
        },
        localList (v) {
            console.info('localList: ', v)
            v && v.length && this.handlerLocalList(v)
        },
        imgCount (n) {
            const len = this.tempList.length
            if (n && len && n === len) {
                this.renderData(this.tempList)
                this.tempList = []
                this.imgCount = 0
            }
        }
    }
})
</script>

<style lang="scss">
.wrap{
    width: 100vw;
}
.temp-load-box{
    display: none;
}
.img-list {
    display: flex;
    padding: 0 5px;
    overflow: auto;
    min-height: 50vh;

    .no-data{
        background: url("../../images/pic-photo-none.png") no-repeat center/50%;
    }

    .column {
        flex: 1;
        padding: 5px;
        display: flex;
        flex-direction: column;
    }

    .item {
        width: 100%;
        overflow: hidden;
        position: relative;
        border-radius: 5px;
        margin-bottom: 10px;

        .album {
            width: 100%;
            background: #d4d4d4;
            vertical-align: middle;
            box-shadow: 0 0 5px rgba(#000, .25);
        }

        &:last-child {
            flex: 1;
            min-height: 30px;
            display: flex;
            font-size: 10px;
            padding-bottom: 0;
            border-radius: 5px;
            align-items: center;
            justify-content: center;
            font-family: "Songti SC", "PingFang SC", serif;
            box-shadow: 0 0 5px rgba(#000, .25) inset;
        }
    }
}

.progress-box {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    background-color: rgba(#000, 0.35);

    .progress {
        width: 10vw;
        height: 10vw;
        overflow: hidden;
        border-radius: 50%;
        background: rgba(#333, 0.5);
        box-shadow: 0 0 5px rgba(#000, .88);
    }

    .content{
        width: 100%;
        height: 100%;
        margin-top: 100%;
        position: relative;

        &:before,
        &:after{
            content: '';
            top: 0;
            width: 20vw;
            height: 20vw;
            position: absolute;
            border-radius: 45%;
            display: inline-block;
        }
        &:before{
            left: -4.5vw;
            background-color: #50c1f1;
            animation: water linear 3.5s infinite;
        }
        &:after{
            left: -5.5vw;
            background-color: #479fca;
            animation: water linear 3s infinite;
        }
    }

    @keyframes water {
        0% {
            //transform: translateX(-50%) rotateZ(0deg);
            transform: rotateZ(0deg);
        }
        100% {
            //transform: translateX(-50%) rotateZ(360deg);
            transform: rotateZ(360deg);
        }
    }
}

.layer {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9;
    position: fixed;
    background-color: #000;

    .inner {
        width: 100%;
        height: 100%;
        display: flex;
        overflow: auto;
        background-size: 0 0;
        align-items: center;
        justify-content: center;
        -webkit-overflow-scrolling: touch;

        &:before {
            content: '';
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            margin: -10px;
            filter: blur(8px);
            position: fixed;
            background-size: cover;
            background-image: inherit;
            background-position: center;
        }

        &:after {
            content: '';
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
            position: fixed;
            background-color: rgba(#fff, 0.1);
        }
    }

    .photograph {
        z-index: 3;
        max-width: 85%;
        border-radius: 5px;
        position: relative;
        box-shadow: 0 0 5px rgba(#000, 0.3);
    }
}
</style>

<script type="application/json">
    {
        "component": true
    }
</script>
